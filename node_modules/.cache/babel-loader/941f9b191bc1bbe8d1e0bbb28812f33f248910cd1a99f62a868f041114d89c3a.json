{"ast":null,"code":"import { OCTOBER, NOVEMBER, DECEMBER, TOTALPOINTS, NAME } from \"../constants/constants\";\nexport const returnRewards = customerTransactions => {\n  return customerTransactions.map(customer => {\n    return {\n      name: Object.keys(customer)[0],\n      october: calculatePoints(getTransactionArrayforCustomer(customer, OCTOBER)),\n      november: calculatePoints(getTransactionArrayforCustomer(customer, NOVEMBER)),\n      december: calculatePoints(getTransactionArrayforCustomer(customer, DECEMBER)),\n      get totalPoints() {\n        return calculateTotalPoints(this.october, this.november, this.december);\n      }\n    };\n  });\n};\nconst getTransactionArrayforCustomer = (customer, month) => {\n  if (customer && customer[[Object.keys(customer)[0]]]) {\n    return customer[[Object.keys(customer)[0]]][0][month];\n  } else {\n    return [];\n  }\n};\nexport const calculatePoints = transactions => {\n  const transactionPoints = calculatePointsForEachTransaction(transactions);\n  const initialPoints = 0;\n  const totalPoints = transactionPoints.reduce((sum, pointsPerTransaction) => sum + pointsPerTransaction, initialPoints);\n  return totalPoints;\n};\nconst calculatePointsForEachTransaction = transactions => {\n  return transactions.map(dollarAmount => {\n    let points = 0;\n    if (dollarAmount > 100) {\n      points = (dollarAmount - 100) * 2 + (dollarAmount - (dollarAmount - 100) - 50) * 1;\n    } else if (dollarAmount > 50) {\n      points = (dollarAmount - 50) * 1;\n    }\n    return Math.round(points);\n  });\n};\nconst calculateTotalPoints = (octoberPoints, novemberPoints, decemberPoints) => octoberPoints + novemberPoints + decemberPoints;","map":{"version":3,"names":["OCTOBER","NOVEMBER","DECEMBER","TOTALPOINTS","NAME","returnRewards","customerTransactions","map","customer","name","Object","keys","october","calculatePoints","getTransactionArrayforCustomer","november","december","totalPoints","calculateTotalPoints","month","transactions","transactionPoints","calculatePointsForEachTransaction","initialPoints","reduce","sum","pointsPerTransaction","dollarAmount","points","Math","round","octoberPoints","novemberPoints","decemberPoints"],"sources":["/Users/valapalajyotheeswar/Documents/NEW GIT/assessment/src/utils/utils.js"],"sourcesContent":["import { OCTOBER, NOVEMBER, DECEMBER,TOTALPOINTS, NAME } from \"../constants/constants\"\n\nexport const returnRewards = (customerTransactions) => {\n    return customerTransactions.map(customer => {\n        return {\n            name: Object.keys(customer)[0],\n            october:calculatePoints(getTransactionArrayforCustomer(customer,OCTOBER)),\n            november: calculatePoints(getTransactionArrayforCustomer(customer,NOVEMBER)),\n            december: calculatePoints(getTransactionArrayforCustomer(customer,DECEMBER)),\n            get totalPoints() {\n                return calculateTotalPoints(this.october, this.november, this.december)\n                }\n        }\n    })\n}\n\nconst getTransactionArrayforCustomer = (customer, month) => {\n    if (customer && customer[[Object.keys(customer)[0]]]) {\n        return customer[[Object.keys(customer)[0]]][0][month];\n    } else {\n        return []\n    }\n}\n\n\nexport const calculatePoints = (transactions) => {\n    const transactionPoints = calculatePointsForEachTransaction (transactions);\n    const initialPoints = 0;\n    const totalPoints = transactionPoints.reduce((sum, pointsPerTransaction) => sum + pointsPerTransaction,\n    initialPoints);\n    return totalPoints;\n}\n\nconst calculatePointsForEachTransaction = (transactions) => {\n    return transactions.map(dollarAmount=>{\n        let points = 0;\n        if (dollarAmount > 100) {\n            points = (dollarAmount - 100) *2 + (dollarAmount - (dollarAmount-100) - 50)*1\n        } else if ( dollarAmount > 50) {\n            points = (dollarAmount-50)*1\n        }\n        return Math.round(points);\n    });\n}\n\nconst calculateTotalPoints = (octoberPoints, novemberPoints, decemberPoints) => octoberPoints + novemberPoints +decemberPoints;"],"mappings":"AAAA,SAASA,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,EAACC,WAAW,EAAEC,IAAI,QAAQ,wBAAwB;AAEtF,OAAO,MAAMC,aAAa,GAAIC,oBAAoB,IAAK;EACnD,OAAOA,oBAAoB,CAACC,GAAG,CAACC,QAAQ,IAAI;IACxC,OAAO;MACHC,IAAI,EAAEC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC9BI,OAAO,EAACC,eAAe,CAACC,8BAA8B,CAACN,QAAQ,EAACR,OAAO,CAAC,CAAC;MACzEe,QAAQ,EAAEF,eAAe,CAACC,8BAA8B,CAACN,QAAQ,EAACP,QAAQ,CAAC,CAAC;MAC5Ee,QAAQ,EAAEH,eAAe,CAACC,8BAA8B,CAACN,QAAQ,EAACN,QAAQ,CAAC,CAAC;MAC5E,IAAIe,WAAW,GAAG;QACd,OAAOC,oBAAoB,CAAC,IAAI,CAACN,OAAO,EAAE,IAAI,CAACG,QAAQ,EAAE,IAAI,CAACC,QAAQ,CAAC;MACvE;IACR,CAAC;EACL,CAAC,CAAC;AACN,CAAC;AAED,MAAMF,8BAA8B,GAAG,CAACN,QAAQ,EAAEW,KAAK,KAAK;EACxD,IAAIX,QAAQ,IAAIA,QAAQ,CAAC,CAACE,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAClD,OAAOA,QAAQ,CAAC,CAACE,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACW,KAAK,CAAC;EACzD,CAAC,MAAM;IACH,OAAO,EAAE;EACb;AACJ,CAAC;AAGD,OAAO,MAAMN,eAAe,GAAIO,YAAY,IAAK;EAC7C,MAAMC,iBAAiB,GAAGC,iCAAiC,CAAEF,YAAY,CAAC;EAC1E,MAAMG,aAAa,GAAG,CAAC;EACvB,MAAMN,WAAW,GAAGI,iBAAiB,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,oBAAoB,KAAKD,GAAG,GAAGC,oBAAoB,EACtGH,aAAa,CAAC;EACd,OAAON,WAAW;AACtB,CAAC;AAED,MAAMK,iCAAiC,GAAIF,YAAY,IAAK;EACxD,OAAOA,YAAY,CAACb,GAAG,CAACoB,YAAY,IAAE;IAClC,IAAIC,MAAM,GAAG,CAAC;IACd,IAAID,YAAY,GAAG,GAAG,EAAE;MACpBC,MAAM,GAAG,CAACD,YAAY,GAAG,GAAG,IAAG,CAAC,GAAG,CAACA,YAAY,IAAIA,YAAY,GAAC,GAAG,CAAC,GAAG,EAAE,IAAE,CAAC;IACjF,CAAC,MAAM,IAAKA,YAAY,GAAG,EAAE,EAAE;MAC3BC,MAAM,GAAG,CAACD,YAAY,GAAC,EAAE,IAAE,CAAC;IAChC;IACA,OAAOE,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;EAC7B,CAAC,CAAC;AACN,CAAC;AAED,MAAMV,oBAAoB,GAAG,CAACa,aAAa,EAAEC,cAAc,EAAEC,cAAc,KAAKF,aAAa,GAAGC,cAAc,GAAEC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}